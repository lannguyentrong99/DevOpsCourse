pipeline {
    agent any
    environment{
        FULL_IMAGE = "556705842113.dkr.ecr.us-west-2.amazonaws.com/fa_back_end:${version}"
        TASK_DEFINITION =""
        NEW_TASK_DEFINITION=""
        NEW_TASK_INFO=""
        NEW_REVISION=""
        TASK_FAMILY="FA_BackEnd_TaskDefinition"
        REGION="us-west-2"
        CLUSTER_NAME="FA-ECS-Cluster"
        SERVICE_NAME="FA_BackEnd_ECS_Service"
    }
    stages {
        stage('Build') {
            when {
                expression {
                    def action=env.ACTION 
                    return action == 'BuildAndDeploy' || action == 'OnlyBuild'
                }
            }
            steps {
                sh 'docker build -t fa_back_end::${version} ./spring-boot-student-app-api/'
            }
        }
        stage('Upload image to ECR') {
            when {
                expression {
                    def action=env.ACTION 
                    return action == 'BuildAndDeploy' || action == 'OnlyBuild'
                }
            }
            steps {
                sh 'aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 556705842113.dkr.ecr.us-west-2.amazonaws.com'
                sh 'docker tag fa_back_end:${version} 556705842113.dkr.ecr.us-west-2.amazonaws.com/fa_back_end:${version}'
                sh 'docker push 556705842113.dkr.ecr.us-west-2.amazonaws.com/fa_back_end:${version}'
            }
        }
        stage('Update task definition and force deploy ecs service') {
            when {
                expression {
                    def action=env.ACTION 
                    return action == 'BuildAndDeploy' || action == 'OnlyDeploy'
                }
            }
            steps {
                sh '''
                    TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${TASK_FAMILY} --region "${REGION}")
                    NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${FULL_IMAGE}" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) |  del(.registeredAt)  | del(.registeredBy)')
                    NEW_TASK_INFO=$(aws ecs register-task-definition --region "${REGION}" --cli-input-json "$NEW_TASK_DEFINITION")
                    NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
                    aws ecs update-service --cluster ${CLUSTER_NAME} --service ${SERVICE_NAME} --task-definition ${TASK_FAMILY}:${NEW_REVISION} --force-new-deployment
                '''
            }
        }
    }
}
